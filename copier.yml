_min_copier_version: "9.5.0"
_templates_suffix: ".tmpl"

package_name:
  type: str
  help: "Enter the Python package name (default: folder name in lowercase, no spaces)"
  default: "{{ _copier_conf.dst_path|basename|lower|replace(' ', '_') }}"

description:
  type: str
  help: "Enter a short description of your project"
  default: "Awesome new project."

maintainers:
  type: yaml
  help: "Enter a list of maintainers (name and optional email)"
  default:
    - { name: "Donato Crisostomi", email: "donatocrisostomi@gmail.com" }

remote_option:
  help: "Do you want to push the project to an existing repository? If so, how would you like to add the remote?"
  type: str
  choices:
    - "GitHub"
    - "manual"
    - "No"
  default: "GitHub"

manual_remote:
  type: str
  help: "Enter the remote URL"
  default: "https://github.com/grok-ai/py-template"
  when: "{{ remote_option == 'manual' }}"

remote_github_protocol:
  type: str
  help: "Choose the GitHub protocol"
  choices:
    - "https"
    - "ssh"
  default: "https"
  when: "{{ remote_option == 'GitHub' }}"

remote_github_username:
  type: str
  help: "Enter your GitHub username"
  default: "crisostomi"
  when: "{{ remote_option == 'GitHub' }}"

remote_github_project:
  type: str
  help: "Enter the name of the GitHub project"
  default: "{{ package_name }}"
  when: "{{ remote_option == 'GitHub' }}"

default_branch:
  type: str
  help: "Name of the default Git branch"
  default: "main"

push_to_remote:
  type: bool
  help: "Do you want to push the project to the remote repository?"
  when: "{{ remote_option != 'No' }}"
  default: true

license:
  type: str
  help: "Choose a license"
  default: "MIT"
  choices:
    - "MIT"
    - "Apache-2.0"

python_version:
  type: str
  help: "Python version (>=3.9 recommended)"
  default: ">=3.9"

use_precommit:
  type: bool
  help: "Enable pre-commit hooks?"
  default: true

dependencies:
  type: yaml
  help: "Enter a list of dependencies (comma-separated). The suggested ones are essential for the template to fully work."
  default: |
    - rich
    - hydra-core
    - python-dotenv
    - GitPython
    {% if use_precommit %}- pre-commit{% endif %}

env_init:
  type: bool
  help: "Do you want to initialize the environment?"
  default: true

remote:
  type: str
  when: false
  default: >
    {% if remote_option == "GitHub" %}
      {% if remote_github_protocol == "https" -%}
        https://github.com/{{ remote_github_username }}/{{ remote_github_project }}.git
      {%- elif remote_github_protocol == "ssh" -%}
        git@github.com:{{ remote_github_username }}/{{ remote_github_project }}.git
      {%- endif %}
    {%- elif remote_option == "manual" %}
      {{ manual_remote if manual_remote else "" }}
    {%- else %}
      ""  # No remote URL
    {%- endif %}

_tasks:
  - "rm -rf setup.sh .github"
  - "{% if env_init %}uv sync{% endif %}"

  # Initialize repo. Use -b when available; otherwise fall back to plain init.
  # If already inside a git repo, skip re-init.
  - >
    git rev-parse --is-inside-work-tree >/dev/null 2>&1
    || (git init -b {{ default_branch }} 2>/dev/null || git init)

  # Ensure we end up on {{ default_branch }} even if init defaulted to master (or anything else).
  - >
    CURRENT_BRANCH=$(git symbolic-ref --quiet --short HEAD || echo);
    if [ -z "$CURRENT_BRANCH" ]; then
      # No branch yet (rare), create it
      git checkout -b {{ default_branch }};
    elif [ "$CURRENT_BRANCH" != "{{ default_branch }}" ]; then
      # Rename whatever we got (e.g., 'master') to {{ default_branch }}
      git branch -M {{ default_branch }};
    fi

  # Pre-commit hooks (optional)
  - "{% if use_precommit %}uv run pre-commit install{% endif %}"

  # First commit
  - "git add ."
  - "git commit -m 'Project initialization with https://github.com/grok-ai/py-template' --no-verify || true"

  # Add remote only if requested
  - "{% if remote_option != 'No' %}git remote add origin {{ remote.strip() }} 2>/dev/null || git remote set-url origin {{ remote.strip() }}{% endif %}"

  # Push to the branch we actually have (which we ensured is {{ default_branch }})
  - "{% if remote_option != 'No' and push_to_remote %}git push -u origin {{ default_branch }}{% endif %}"


